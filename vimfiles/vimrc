" SETS --------------------------------------------------------------------{{{
set number 
set relativenumber
set noerrorbells 
syntax on 
set nowrap 
set showmode 
filetype on 
filetype plugin indent on 
set tabstop=4 
set shiftwidth=4 " autoindent on o
set expandtab "tab now is spaces 
set noswapfile " don't use swaps 
set colorcolumn=80 "make column 80 
set scrolloff=8 "start scroll 8 lines before
set incsearch "incremental search 
set wildmenu
set hidden "so i can move through buffers without saving
set signcolumn=yes "to show errors
set backspace=2 "allow backspace over indent, start, and new lines
let $DOT = $HOME . "/dot"
let $RC = $HOME . "/dot/vimfiles/vimrc"
set path+=**  "allows fuzzy search using find command
"}}}---------------------------------------------------------------------------

" PLUGINS ------------------------------------------------------------------{{{
" add plugins 

call plug#begin() 
" Plug 'vim-pandoc/vim-pandoc' 
" Plug 'vim-pandoc/vim-pandoc-syntax' 
" Plug 'vim-pandoc/vim-rmarkdown' 
" Plug 'NLKNguyen/papercolor-theme'   
" Plug 'ackyshake/VimCompletesMe' 
Plug 'vim-airline/vim-airline' 
Plug 'vim-airline/vim-airline-themes' 
Plug 'karoliskoncevicius/vim-sendtowindow'
Plug 'tpope/vim-surround'
"Plug 'gruvbox-community/gruvbox'
Plug 'sainnhe/gruvbox-material' 
Plug 'tpope/vim-fugitive'
"Plug 'ackyshake/VimCompletesMe'
Plug 'dense-analysis/ale'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'psliwka/vim-smoothie'
"Plug 'andreypopp/asyncomplete-ale.vim'

call plug#end()
" }}}

" MAPPINGS -----------------------------------------------------------------{{{
"
let mapleader = " " 
" open an r terminal in the right window
nnoremap <leader>sr :vsplit<CR><C-w>w:terminal<space>R<CR><C-w>w:q!<CR>
" close the current buffer without closing the window
nnoremap <leader>q :bp<bar>sp<bar>bn<bar>bd<CR>
" insert one character
nnoremap <leader>i i_<Esc>r

" Window Mappings
noremap <C-j> <C-W>j
noremap <C-k> <C-W>k
noremap <C-h> <C-W>h
noremap <C-l> <C-W>l
" Apply same mappings to terminal
tnoremap <C-j> <C-W>j
tnoremap <C-k> <C-W>k
tnoremap <C-h> <C-W>h
tnoremap <C-l> <C-W>l

" remap esc key
inoremap kj <esc>
cnoremap kj <C-C> 

" ale remap
nnoremap <leader>afws :ALEFix<space>trim_whitespace<CR> 

" }}}

" VIMSCRIPT ----------------------------------------------------------------{{{
" This will enable code folding
" Use the marker method of folding
augroup filetype_vim
 autocmd!
 autocmd FileType vim setlocal foldmethod=marker
augroup END 

" Use ale within asyncomplete
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#ale#get_source_options({
    \ 'priority': 10, 
    \ }))
" remaps for asyncomplte 
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"
" autocmd vimenter * ++nested colorscheme gruvbox

" Source RC file from dot file directory. This way I can updated rc from 
" different repo
let win=has('win32')
let mac=has('macunix')
function! MoveDotRepoAndSource()
  if has('win32')
    !ROBOCOPY C:\Users\muellerwf\dot\  
                    \  C:\Users\muellerwf\ 
                    \  /e 
                    \  /xf .gitignore
                    \  /xd .git
  elseif has('macunix')
    !rsync $HOME/dot/* $HOME --exclude=$HOME/.gitignore 
                    \   --exclude=$HOME/.git/ -r -v  
    !rsync $HOME/vimfiles/* $HOME/.vim/ -r 
    !rm -rf $HOME/vimfiles
    !mv $HOME/.vim/vimrc $HOME/.vimrc
  endif
endfunction

command! Sorc call MoveDotRepoAndSource() | source $MYVIMRC

" }}}

" STATUS LINE --------------------------------------------------------------{{{

let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#enabled = 1
" let g:airline_left_sep = '>>' 
" let g:airline_right_sep = '<<'

" }}}

" GVIM  --------------------------------------------------------------------{{{

au GUIEnter * simalt ~x
if has("gui_running")
  " Set a nicer font.
  set guifont=Consolas:h11:cDEFAULT
  set guioptions-=T " Hide the toolbar.
  set guioptions-=m "remove menu bar
  set guioptions-=l "remove scroll bar 
  set guioptions-=r "remove scroll bar
  set guioptions-=b "remove scroll bar
  set guioptions= "remove all gui options
endif

"  }}}

" OUTRO --------------------------------------------------------------------{{{  
let g:gruvbox_material_enable_italic=0 "fixed grubox highlight issue on mac
let g:gruvbox_material_disable_italic_comment=1 "fixed grubox highlight issue on mac
set termguicolors "fixed grubox highlight issue on mac
colorscheme gruvbox-material
set background=dark
set laststatus=2
"let g:ale_completion_enable = 1
let g:asyncomplete_auto_popup=1
" colo PaperColor
" hi ColorColumn ctermbg=grey guibg=grey
" }}}--------------------------------------------------------------------------

